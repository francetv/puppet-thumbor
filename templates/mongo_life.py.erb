#!/usr/bin/python2.7
from pymongo import *
from datetime import datetime
from datetime import timedelta
from prometheus_client.parser import text_string_to_metric_families
import requests
import os, sys
import getopt
import gridfs
import configparser

##############################
def main():
  version_s="1.2.101"
  path_result=""
  maintenance=""
  path_storage="aaa"
  try:
      opts, args = getopt.getopt(sys.argv[1:], "c:s:m:l:v")
  except getopt.GetoptError as err:
    sys.stdout = sys.stderr
    print """usage: %s [-c|-s|-m|-v] [file|-]
    -c <path> : purge du path dans le cache Mongodb
    -s <path> : purge du path dans le storage Mongodb
    -m - : Effectue la maintenance de base Mongodb Index et coherence
    -l - : Affiche les statistiques
    -v : Affiche la version"""%sys.argv[0]
    sys.exit(2)

  for o, a in opts:
    if o == "-c":
      path_result = a
      parameters = read_parameters('cache')
      result_purge = purge_cache(parameters, path_result)
      break
    elif o == "-s":
      path_storage = a
      parameters = read_parameters('storage')
      result_purge = purge_storage(parameters, path_storage)
      break
    elif o == "-m":
      maintenance = a
      parameters = read_parameters('all')
      result_maintenance = maintenance_tools(parameters)
      break
    elif o == "-v":
      print "Version %s "%version_s
      sys.exit(0)

    elif o == "-l":
      try:
          metrics = requests.get("http://127.0.0.1:8988",timeout=5)
          load(metrics.content, "8888")
      except:
          print "\n***** Pas d'instance statistique lisible sur le port 8988 *****\n"
      try:
          metrics = requests.get("http://127.0.0.1:8989",timeout=5)
          load(metrics.content, "8889")
      except:
          print "\n***** Pas d'instance statistique lisible sur le port 8989 *****\n"
      try:
          metrics = requests.get("http://127.0.0.1:8999",timeout=5)
          load(metrics.content, "8890")
      except:
          print "\n***** Pas d'instance statistique lisible sur le port 8990 *****\n"
      sys.exit(0)

    else:
      assert False, "Mauvaise option"
      sys.exit(2)



##############################
def read_parameters(comp):

  with open('/etc/thumbor/thumbor-8888.conf') as f:
    file_content = u'[main]\n' + f.read()

  config_parser = configparser.RawConfigParser()
  config_parser.read_string(file_content)

  if comp == 'cache':

    dictconfig = {
      "ttl_cache": config_parser.get('main','RESULT_STORAGE_EXPIRATION_SECONDS').replace("\"", ""),
      "mongo_cache_server": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_HOST').replace("\"", ""),
      "mongo_cache_user": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_USER').replace("\"", ""),
      "mongo_cache_pass": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_PASSWORD').replace("\"", ""),
      "mongo_cache_authdb": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_AUTH').replace("\"", ""),
      "mongo_cache_db": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_DB').replace("\"", ""),
      "mongo_cache_col": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_COLLECTION').replace("\"", ""),
      "mongo_cache_mod": config_parser.get('main','RESULT_STORAGE').replace("\"", "")
    }

  elif comp == 'storage':
    if config_parser.get('main','STORAGE', fallback='none').replace("\"", "") == 'thumbor_mongodb_storage_webp.storages.mongo_storage':

      dictconfig= {
        "ttl_storage": config_parser.get('main','STORAGE_EXPIRATION_SECONDS').replace("\"", ""),
        "ttl_cache": config_parser.get('main','RESULT_STORAGE_EXPIRATION_SECONDS').replace("\"", ""),
        "mongo_str_server": config_parser.get('main','MONGO_STORAGE_SERVER_HOST').replace("\"", ""),
        "mongo_str_user": config_parser.get('main','MONGO_STORAGE_SERVER_USER').replace("\"", ""),
        "mongo_str_pass": config_parser.get('main','MONGO_STORAGE_SERVER_PASSWORD').replace("\"", ""),
        "mongo_str_authdb": config_parser.get('main','MONGO_STORAGE_SERVER_AUTH').replace("\"", ""),
        "mongo_str_db": config_parser.get('main','MONGO_STORAGE_SERVER_DB').replace("\"", ""),
        "mongo_str_col": config_parser.get('main','MONGO_STORAGE_SERVER_COLLECTION').replace("\"", ""),
        "mongo_str_mod": config_parser.get('main','STORAGE').replace("\"", ""),
        # conf cache
        "mongo_cache_server": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_HOST').replace("\"", ""),
        "mongo_cache_user": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_USER').replace("\"", ""),
        "mongo_cache_pass": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_PASSWORD').replace("\"", ""),
        "mongo_cache_authdb": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_AUTH').replace("\"", ""),
        "mongo_cache_db": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_DB').replace("\"", ""),
        "mongo_cache_col": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_COLLECTION').replace("\"", ""),
        "mongo_cache_mod": config_parser.get('main','RESULT_STORAGE').replace("\"", "")
      }
    else:
      print "\033[31mSTORAGE - Cette fonction n'est pas compatible avec cette instance\033[0m"
      sys.exit(0)


  else:
    if config_parser.get('main','STORAGE', fallback='none').replace("\"", "") == 'thumbor_mongodb_storage_webp.storages.mongo_storage' and\
    config_parser.get('main','RESULT_STORAGE', fallback='none').replace("\"", "") == 'thumbor_mongodb_storage_webp.result_storages.mongo_result_storage':

      dictconfig= {
        # conf TTL
        "ttl_storage": config_parser.get('main','STORAGE_EXPIRATION_SECONDS').replace("\"", ""),
        "ttl_cache": config_parser.get('main','RESULT_STORAGE_EXPIRATION_SECONDS').replace("\"", ""),
        # conf storage
        "mongo_str_server": config_parser.get('main','MONGO_STORAGE_SERVER_HOST').replace("\"", ""),
        "mongo_str_user": config_parser.get('main','MONGO_STORAGE_SERVER_USER').replace("\"", ""),
        "mongo_str_pass": config_parser.get('main','MONGO_STORAGE_SERVER_PASSWORD').replace("\"", ""),
        "mongo_str_authdb": config_parser.get('main','MONGO_STORAGE_SERVER_AUTH').replace("\"", ""),
        "mongo_str_db": config_parser.get('main','MONGO_STORAGE_SERVER_DB').replace("\"", ""),
        "mongo_str_col": config_parser.get('main','MONGO_STORAGE_SERVER_COLLECTION').replace("\"", ""),
        "mongo_str_mod": config_parser.get('main','STORAGE').replace("\"", ""),
        # conf cache
        "mongo_cache_server": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_HOST').replace("\"", ""),
        "mongo_cache_user": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_USER').replace("\"", ""),
        "mongo_cache_pass": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_PASSWORD').replace("\"", ""),
        "mongo_cache_authdb": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_AUTH').replace("\"", ""),
        "mongo_cache_db": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_DB').replace("\"", ""),
        "mongo_cache_col": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_COLLECTION').replace("\"", ""),
        "mongo_cache_mod": config_parser.get('main','RESULT_STORAGE').replace("\"", ""),
        "instance_type": 'full'
      }


    else:
      dictconfig= {
        # conf TTL
        "ttl_cache": config_parser.get('main','RESULT_STORAGE_EXPIRATION_SECONDS').replace("\"", ""),
        # conf cache
        "mongo_cache_server": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_HOST').replace("\"", ""),
        "mongo_cache_user": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_USER').replace("\"", ""),
        "mongo_cache_pass": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_PASSWORD').replace("\"", ""),
        "mongo_cache_authdb": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_AUTH').replace("\"", ""),
        "mongo_cache_db": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_DB').replace("\"", ""),
        "mongo_cache_col": config_parser.get('main','MONGO_RESULT_STORAGE_SERVER_COLLECTION').replace("\"", ""),
        "mongo_cache_mod": config_parser.get('main','RESULT_STORAGE').replace("\"", ""),
        "instance_type": 'simple'
      }

  return dictconfig

##############################
def con_mongo(parameters, env):

  if (parameters['mongo_cache_mod'] == 'thumbor_mongodb_storage.result_storages.mongo_result_storage'\
    or parameters['mongo_cache_mod'] == 'thumbor_mongodb_storage_webp.result_storages.mongo_result_storage')\
    and env == 'cache':
    uri2 = "mongodb://" + parameters['mongo_cache_user'] + ":" + parameters['mongo_cache_pass'] + "@" + parameters['mongo_cache_server'] \
    + "/?authSource=" + parameters['mongo_cache_authdb'] #+ "&replicaSet=education-preprod"
    instance = MongoClient(uri2)
    return instance
  elif (parameters['mongo_str_mod'] == 'thumbor_mongodb_storage.storages.mongo_storage'\
    or parameters['mongo_str_mod'] == 'thumbor_mongodb_storage_webp.storages.mongo_storage')\
    and env == 'storage':
    uri2 = "mongodb://" + parameters['mongo_str_user'] + ":" + parameters['mongo_str_pass'] + "@" + parameters['mongo_str_server'] \
    + "/?authSource=" + parameters['mongo_str_authdb'] #+ "&replicaSet=education-preprod"
    instance = MongoClient(uri2)
    return instance
  else:
    return None

##############################
def purge_cache(parameters, path):

  client = con_mongo(parameters, 'cache')
  db2 = client[parameters['mongo_cache_db']]
  completed_path= "result:" + path

  if db2[parameters['mongo_cache_col']].find_one({'path': completed_path}):
    db2[parameters['mongo_cache_col']].delete_one({'path': completed_path})
    print "\033[32mCACHE - Objet:", completed_path, " supprime \033[0m"
  else:
    print "\033[32m CACHE - Objet:", path, " non trouve \033[0m"
  sys.exit(0)

##############################
def purge_storage(parameters, path):

  client = con_mongo(parameters, 'storage')
  db2 = client[parameters['mongo_str_db']]

  if db2[parameters['mongo_str_col']].find_one({'path': path}):
    collection = db2.fs.files
    scan = db2[parameters['mongo_str_col']].find_one({'path': path})
    db2[parameters['mongo_str_col']].delete_one({'_id': scan['_id']})
    result = collection.find({"_id": scan['file_id']})
    imgfs = 0
    for doc in result:
      files_id = doc['_id']
      fs = gridfs.GridFS(db2)
      fs.delete(files_id)
      imgfs = imgfs + 1

    client2 = con_mongo(parameters, 'cache')
    db3 = client[parameters['mongo_cache_db']]
    coll3 =  db3[parameters['mongo_cache_col']]
    x = 0
    x = coll3.delete_many({'ref_id': path})
    print "\033[32mSTORAGE - Objet:", path, " supprime, " , imgfs , " chunk," , x.deleted_count ," images associees en cache\033[0m"
  else:
    print "\033[32mSTORAGE - Objet:", path, " non trouve \033[0m"


  sys.exit(0)

##############################
def maintenance_tools(parameters):

  print "\033[35mSTORAGE####################### Verification de l'index de recherche.....##############################\033[0m"
  if parameters['instance_type'] == 'full':
    client = con_mongo(parameters, 'storage')
    if client:
      db2 = client[parameters['mongo_str_db']]
      resp = db2[parameters['mongo_str_col']].index_information()
      col = db2[parameters['mongo_str_col']]
      if  resp.get('moteur'):
        print "\033[32mSTORAGE - Index de performance present \033[0m"
      else:
        print "\033[31mSTORAGE - L'index de performance n'est pas present dans la collection\033[0m"
        print "\033[32mSTORAGE - Creation de l'index de performance\033[0m"
        col.create_index([('path', ASCENDIiNG)], background='true', name='moteur')

      print ("\033[32mSTORAGE - index performance: \033[0m")
      print ("\033[32m*************************************************************\033[0m")
      resp = db2.images.index_information()
      print resp.get('moteur')
      print ("\033[32m*************************************************************\033[0m")
      print "\033[32mSTORAGE - Fin de la verification index de performance\033[0m"
      imgc=0
      imgfs=0
      goodst=0
      gooph=0
      col7 = db2[parameters['mongo_str_col']]
      print "\033[32mSTORAGE - Supression des images et chunks associes \033[0m"
      today = datetime.today()
      ttl_removefs = int(parameters['ttl_storage'],10)/86400
      # Recherche dans la collection image les images vieilles
      resultimg = col7.find({"created_at": {"$lt": today - timedelta(ttl_removefs)}})
      collection = db2.fs.files
      # Recherche les fragments gridFS correspondants
      for img in resultimg:
        col7.delete_one({"_id": img['_id']})
        result = collection.find({"_id": img['file_id']})
        imgc = imgc + 1
        for doc in result:
          files_id = doc['_id']
          fs = gridfs.GridFS(db2)
          fs.delete(files_id)
          imgfs = imgfs + 1
      print "\033[32mINFO - Fin de purge du stockage -" + str(imgc) + " images / -" + str(imgfs) + " chuncks\033[0m"
    else:
      print "\033[31mSTORAGE - Cette fonction n'ets pas compatible avec cette instance\033[0m"


  print "\033[35mCACHE############################# Verification de l'index TTL.....###################################\033[0m"
  client2 = con_mongo(parameters, 'cache')
  if client2:
    db3 = client2[parameters['mongo_cache_db']]
    resp2 = db3[parameters['mongo_cache_col']].index_information()
    col2= db3[parameters['mongo_cache_col']]
    tta2= int(parameters['ttl_cache'],10)
    if resp2.get('purge'):
      print "\033[32mCACHE - Index TTL present\033[0m"
      eee2 = resp2.get('purge')
      aaa2 = int(eee2['expireAfterSeconds']);
      #aaa2 = map(int ,eee2['expireAfterSeconds']);
      if aaa2 >> tta2:
        print "\033[34mCACHE - Le TTL en base (",aaa2,") est superieur a la configuration (", parameters['ttl_cache'],"\033[0m)"
        print "\033[32mCACHE - Supression de l'index de purge\033[0m"
        col2.drop_index('purge')
        col2.create_index([('created_at', ASCENDING)], background='true', name='purge', expireAfterSeconds=tta2)
      elif aaa2 == tta2:
        print "\033[32mCACHE - Le TTL en base (",aaa2,") est identique a la configuration (",parameters['ttl_cache'],")\033[0m"
      else:
        print "\033[34mCACHE - Le TTL en base (",aaa2,") est inferieur a la configuration (",parameters['ttl_cache'],")\033[0m"
        col2.drop_index('purge')
        col2.create_index([('created_at', ASCENDING)], background='true', name='purge', expireAfterSeconds=tta2)
    else:
      print "\033[31mCACHE - L'index de purge n'est pas present dans la collection\033[0m"
      col2.create_index([('created_at', ASCENDING)], background='true', name='purge', expireAfterSeconds=tta2)

    print "\033[35mCACHE######################### Verification de l'index de recherche.....##############################\033[0m"
    if  resp2.get('moteur'):
      print "\033[32mCACHE - Index de performance present\033[0m"
    else:
      print "\033[31mCACHE - L'index de performance n'est pas present dans la collection\033[0m"
      print "\033[32mCACHE - Creation de l'index de performance\033[0m"
      col2.create_index([('path', ASCENDING)], background='true', name='moteur')

    if  resp2.get('rmv'):
      print "\033[32mCACHE - Index de performance II present\033[0m"
    else:
      print "\033[31mCACHE - L'index de performance II n'est pas present dans la collection\033[0m"
      print "\033[32mCACHE - Creation de l'index de performance II\033[0m"
      col2.create_index([('ref_id', ASCENDING)], background='true', name='rmv')

    print ("\033[32mCACHE - index performance: \033[0m")
    print ("\033[32m*************************************************************\033[0m")
    resp2 = db3[parameters['mongo_cache_col']].index_information()
    print resp2.get('moteur')
    print resp2.get('rmv')
    print ("\033[32m*************************************************************\033[0m")
    print "\033[32mCACHE - Fin de la verification index de performance\033[0m"
  else:
    print "\033[31mCACHE - Cette fonction n'ets pas compatible avec cette instance\033[0m"

##############################
def load(metrics, inst):
  
  [jpg_total, png_total,gif_total,webp_total] = [[0.00001] for i in range(4)]
  [miss_str_total, hit_str_total,hit_total,miss_total,http_ok_total,http_nm_total,http_err_total,http_total] = [[0.00001] for i in range(8)]
  [sum_temp_png, count_temp_png,sum_temp_jpg,count_temp_jpg,sum_temp_gif,count_temp_gif,sum_temp_webp,count_temp_webp] = [[0.00001] for i in range(8)]
  [process_time, cpu_time,mem_virtual,mem_resident,fds_open,fds_max] = [[0] for i in range(6)]

  for family in text_string_to_metric_families(metrics):
    for sample in family.samples:
      #### hit cache
      if ("{0}".format(*sample) == "thumbor_result__storage_hit_total") and ("{1}".format(*sample) == "{}"):
          hit_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_result__storage_miss_total") and ("{1}".format(*sample) == "{}"):
          miss_total="{2}".format(*sample).split(".")
      #### hit storage
      if ("{0}".format(*sample) == "thumbor_storage_hit_total") and ("{1}".format(*sample) == "{}"):
          hit_str_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_storage_miss_total") and ("{1}".format(*sample) == "{}"):
          miss_str_total="{2}".format(*sample).split(".")
      #### hit format
      elif ("{0}".format(*sample) == "thumbor_response_format_total") and ("{1}".format(*sample) == "{'extension': 'jpg'}"):
          jpg_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_format_total") and ("{1}".format(*sample) == "{'extension': 'png'}"):
          png_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_format_total") and ("{1}".format(*sample) == "{'extension': 'gif'}"):
          gif_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_format_total") and ("{1}".format(*sample) == "{'extension': 'webp'}"):
          webp_total="{2}".format(*sample).split(".")
      #### code status
      elif ("{0}".format(*sample) == "thumbor_response_count_total") and ("{1}".format(*sample) == "{}"):
          http_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_status_total") and ("{1}".format(*sample) == "{'statuscode': '200'}"):
          http_ok_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_status_total") and ("{1}".format(*sample) == "{'statuscode': '304'}"):
          http_nm_total="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_status_total") and ("{1}".format(*sample) == "{'statuscode': '400'}"):
          http_err_total="{2}".format(*sample).split(".")
      #### Temps de reponse
      elif ("{0}".format(*sample) == "thumbor_response_time_count") and ("{1}".format(*sample) == "{'statuscode_extension': 'jpg'}"):
          count_temp_jpg="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_sum") and ("{1}".format(*sample) == "{'statuscode_extension': 'jpg'}"):
          sum_temp_jpg="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_count") and ("{1}".format(*sample) == "{'statuscode_extension': 'png'}"):
          count_temp_png="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_sum") and ("{1}".format(*sample) == "{'statuscode_extension': 'png'}"):
          sum_temp_png="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_count") and ("{1}".format(*sample) == "{'statuscode_extension': 'gif'}"):
          count_temp_gif="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_sum") and ("{1}".format(*sample) == "{'statuscode_extension': 'gif'}"):
          sum_temp_gif="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_count") and ("{1}".format(*sample) == "{'statuscode_extension': 'webp'}"):
          count_temp_webp="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "thumbor_response_time_sum") and ("{1}".format(*sample) == "{'statuscode_extension': 'webp'}"):
          sum_temp_webp="{2}".format(*sample).split(".")


      #### PROCESS
      elif ("{0}".format(*sample) == "process_start_time_seconds") and ("{1}".format(*sample) == "{}"):
          process_time="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "process_cpu_seconds_total") and ("{1}".format(*sample) == "{}"):
          cpu_time="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "process_virtual_memory_bytes") and ("{1}".format(*sample) == "{}"):
          mem_virtual="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "process_resident_memory_bytes") and ("{1}".format(*sample) == "{}"):
          mem_resident="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "process_open_fds") and ("{1}".format(*sample) == "{}"):
          fds_open="{2}".format(*sample).split(".")
      elif ("{0}".format(*sample) == "process_max_fds") and ("{1}".format(*sample) == "{}"):
          fds_max="{2}".format(*sample).split(".")

  ######### process
  print '\n##############################################'
  print '############## PROCESSUS ' + inst + ' ################'
  start_time=datetime.utcfromtimestamp(float(process_time[0])).strftime('%Y-%m-%d %H:%M:%S')
  print('En fonction depuis: ' + start_time )
  print('Temps Cpu consomme: ' + str(int(cpu_time[0])) + ' s ')
  moy_virt=(int(mem_virtual[0]) /8) / 1024 / 1024
  print('Memoire virtuelle utilise: ' + str(int(moy_virt))) + 'Mo'
  moy_res=(int(mem_resident[0]) /8) / 1024 / 1024
  print('Memoire utilise: ' + str(int(moy_res))) + 'Mo'
  print('File descriptor: ' + str(int(fds_open[0])) + ' utilises sur ' + str(int(fds_max[0])))

  ########## hit
  print "############ STATISTIQUES HITS ###############"
  print('Nombre de demande: ' + str(int(http_total[0])))
  percent_okhttp=(100/ (float(http_ok_total[0]) + float(http_err_total[0]) + float(http_nm_total[0]))) *float(http_ok_total[0])
  print('Nombre de 200 http: ' + str(int(http_ok_total[0]))+ ' (' +  str(int(percent_okhttp)) + '%)')
  percent_nmhttp=(100/ (float(http_ok_total[0]) + float(http_err_total[0]) + float(http_nm_total[0]))) *float(http_nm_total[0])
  print('Nombre de 30x http: ' + str(int(http_nm_total[0]))+ ' (' +  str(int(percent_nmhttp)) + '%)')
  percent_errhttp=(100/ (float(http_ok_total[0]) + float(http_err_total[0]) + float(http_nm_total[0]))) *float(http_err_total[0])
  print('Nombre de 400 http: ' + str(int(http_err_total[0]))+ ' (' +  str(int(percent_errhttp)) + '%)')
  ####### JPEG
  percent_jpeg=(100/ (float(jpg_total[0]) + float(png_total[0]) + float(gif_total[0]) + float(webp_total[0]) )) *float(jpg_total[0])
  print('Nombre de Jpeg demande: ' + str(int(jpg_total[0]))+ ' (' +  str(int(percent_jpeg)) + '%)')
  ####### PNG
  percent_png=(100/ (float(jpg_total[0]) + float(png_total[0]) + float(gif_total[0])  + float(webp_total[0])  )) *float(png_total[0])
  print('Nombre de Png  demande: ' + str(int(png_total[0]))+ ' (' +  str(int(percent_png)) + '%)')
  ####### GIF
  percent_gif=(100/ (float(jpg_total[0]) + float(png_total[0]) + float(gif_total[0])  + float(webp_total[0]) )) *float(gif_total[0])
  print('Nombre de Gif  demande: ' + str(int(gif_total[0]))+ ' (' +  str(int(percent_gif)) + '%)')
  ####### WEBP
  percent_webp=(100/ (float(jpg_total[0]) + float(png_total[0]) + float(gif_total[0])  + float(webp_total[0]) )) *float(webp_total[0])
  print('Nombre de Webp demande: ' + str(int(webp_total[0]))+ ' (' +  str(int(percent_webp)) + '%)')
  ###### Temps de reponse
  print "############ STATISTIQUES TEMPS ##############"
  moy_jpg=(float(sum_temp_jpg[0]) / float(count_temp_jpg[0])) /1000
  print('Temps moyen par Jpeg: ' + str(round(moy_jpg,3))) + ' s'
  moy_png=(float(sum_temp_png[0]) / float(count_temp_png[0])) /1000
  print('Temps moyen par Png : ' + str(round(moy_png,3))) + ' s'
  moy_gif=(float(sum_temp_gif[0]) / float(count_temp_gif[0])) /1000
  print('Temps moyen par Gif : ' + str(round(moy_gif,3))) + ' s'
  moy_webp=(float(sum_temp_webp[0]) / float(count_temp_webp[0])) /1000
  print('Temps moyen par Webp: ' + str(round(moy_webp,3))) + ' s'
  print "######## STATISTIQUES PERFORMANCE ############"
  ######### % hit storage ########
  percent_storage=(100/(float(hit_str_total[0]) + float(miss_str_total[0])))*float(hit_str_total[0])
  print('Hits sur storage: ' + str(int(hit_str_total[0]))+ ' (' +  str(int(percent_storage)) + '%)')
  ####### % de hit cache #######
  percent_cache=(100/(float(hit_total[0]) + float(miss_total[0])))*float(hit_total[0])
  print('Hits en cache: ' + str(int(hit_total[0]))+ ' (' +  str(int(percent_cache)) + '%)\n')
  return True
main()
